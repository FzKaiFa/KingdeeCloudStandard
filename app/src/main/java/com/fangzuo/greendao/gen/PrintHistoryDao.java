package com.fangzuo.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.fangzuo.assist.cloud.Beans.PrintHistory;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PRINT_HISTORY".
*/
public class PrintHistoryDao extends AbstractDao<PrintHistory, Void> {

    public static final String TABLENAME = "PRINT_HISTORY";

    /**
     * Properties of entity PrintHistory.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property FTitle = new Property(0, String.class, "FTitle", false, "FTITLE");
        public final static Property FHuoquan = new Property(1, String.class, "FHuoquan", false, "FHUOQUAN");
        public final static Property FBarCode = new Property(2, String.class, "FBarCode", false, "FBAR_CODE");
        public final static Property FBatch = new Property(3, String.class, "FBatch", false, "FBATCH");
        public final static Property FName = new Property(4, String.class, "FName", false, "FNAME");
        public final static Property FModel = new Property(5, String.class, "FModel", false, "FMODEL");
        public final static Property FNum = new Property(6, String.class, "FNum", false, "FNUM");
        public final static Property FNum2 = new Property(7, String.class, "FNum2", false, "FNUM2");
        public final static Property FUnit = new Property(8, String.class, "FUnit", false, "FUNIT");
        public final static Property FBaseUnit = new Property(9, String.class, "FBaseUnit", false, "FBASE_UNIT");
        public final static Property FBaseUnitID = new Property(10, String.class, "FBaseUnitID", false, "FBASE_UNIT_ID");
        public final static Property FStoreUnit = new Property(11, String.class, "FStoreUnit", false, "FSTORE_UNIT");
        public final static Property FUnitAux = new Property(12, String.class, "FUnitAux", false, "FUNIT_AUX");
        public final static Property FNot = new Property(13, String.class, "FNot", false, "FNOT");
        public final static Property FWaveHouse = new Property(14, String.class, "FWaveHouse", false, "FWAVE_HOUSE");
        public final static Property FSaveIn = new Property(15, String.class, "FSaveIn", false, "FSAVE_IN");
        public final static Property FCheck = new Property(16, String.class, "FCheck", false, "FCHECK");
        public final static Property FDate = new Property(17, String.class, "FDate", false, "FDATE");
        public final static Property FMaterialid = new Property(18, String.class, "FMaterialid", false, "FMATERIALID");
        public final static Property FAuxSign = new Property(19, String.class, "FAuxSign", false, "FAUX_SIGN");
        public final static Property FActualModel = new Property(20, String.class, "FActualModel", false, "FACTUAL_MODEL");
    }


    public PrintHistoryDao(DaoConfig config) {
        super(config);
    }
    
    public PrintHistoryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PRINT_HISTORY\" (" + //
                "\"FTITLE\" TEXT," + // 0: FTitle
                "\"FHUOQUAN\" TEXT," + // 1: FHuoquan
                "\"FBAR_CODE\" TEXT," + // 2: FBarCode
                "\"FBATCH\" TEXT," + // 3: FBatch
                "\"FNAME\" TEXT," + // 4: FName
                "\"FMODEL\" TEXT," + // 5: FModel
                "\"FNUM\" TEXT," + // 6: FNum
                "\"FNUM2\" TEXT," + // 7: FNum2
                "\"FUNIT\" TEXT," + // 8: FUnit
                "\"FBASE_UNIT\" TEXT," + // 9: FBaseUnit
                "\"FBASE_UNIT_ID\" TEXT," + // 10: FBaseUnitID
                "\"FSTORE_UNIT\" TEXT," + // 11: FStoreUnit
                "\"FUNIT_AUX\" TEXT," + // 12: FUnitAux
                "\"FNOT\" TEXT," + // 13: FNot
                "\"FWAVE_HOUSE\" TEXT," + // 14: FWaveHouse
                "\"FSAVE_IN\" TEXT," + // 15: FSaveIn
                "\"FCHECK\" TEXT," + // 16: FCheck
                "\"FDATE\" TEXT," + // 17: FDate
                "\"FMATERIALID\" TEXT," + // 18: FMaterialid
                "\"FAUX_SIGN\" TEXT," + // 19: FAuxSign
                "\"FACTUAL_MODEL\" TEXT);"); // 20: FActualModel
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PRINT_HISTORY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PrintHistory entity) {
        stmt.clearBindings();
 
        String FTitle = entity.getFTitle();
        if (FTitle != null) {
            stmt.bindString(1, FTitle);
        }
 
        String FHuoquan = entity.getFHuoquan();
        if (FHuoquan != null) {
            stmt.bindString(2, FHuoquan);
        }
 
        String FBarCode = entity.getFBarCode();
        if (FBarCode != null) {
            stmt.bindString(3, FBarCode);
        }
 
        String FBatch = entity.getFBatch();
        if (FBatch != null) {
            stmt.bindString(4, FBatch);
        }
 
        String FName = entity.getFName();
        if (FName != null) {
            stmt.bindString(5, FName);
        }
 
        String FModel = entity.getFModel();
        if (FModel != null) {
            stmt.bindString(6, FModel);
        }
 
        String FNum = entity.getFNum();
        if (FNum != null) {
            stmt.bindString(7, FNum);
        }
 
        String FNum2 = entity.getFNum2();
        if (FNum2 != null) {
            stmt.bindString(8, FNum2);
        }
 
        String FUnit = entity.getFUnit();
        if (FUnit != null) {
            stmt.bindString(9, FUnit);
        }
 
        String FBaseUnit = entity.getFBaseUnit();
        if (FBaseUnit != null) {
            stmt.bindString(10, FBaseUnit);
        }
 
        String FBaseUnitID = entity.getFBaseUnitID();
        if (FBaseUnitID != null) {
            stmt.bindString(11, FBaseUnitID);
        }
 
        String FStoreUnit = entity.getFStoreUnit();
        if (FStoreUnit != null) {
            stmt.bindString(12, FStoreUnit);
        }
 
        String FUnitAux = entity.getFUnitAux();
        if (FUnitAux != null) {
            stmt.bindString(13, FUnitAux);
        }
 
        String FNot = entity.getFNot();
        if (FNot != null) {
            stmt.bindString(14, FNot);
        }
 
        String FWaveHouse = entity.getFWaveHouse();
        if (FWaveHouse != null) {
            stmt.bindString(15, FWaveHouse);
        }
 
        String FSaveIn = entity.getFSaveIn();
        if (FSaveIn != null) {
            stmt.bindString(16, FSaveIn);
        }
 
        String FCheck = entity.getFCheck();
        if (FCheck != null) {
            stmt.bindString(17, FCheck);
        }
 
        String FDate = entity.getFDate();
        if (FDate != null) {
            stmt.bindString(18, FDate);
        }
 
        String FMaterialid = entity.getFMaterialid();
        if (FMaterialid != null) {
            stmt.bindString(19, FMaterialid);
        }
 
        String FAuxSign = entity.getFAuxSign();
        if (FAuxSign != null) {
            stmt.bindString(20, FAuxSign);
        }
 
        String FActualModel = entity.getFActualModel();
        if (FActualModel != null) {
            stmt.bindString(21, FActualModel);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PrintHistory entity) {
        stmt.clearBindings();
 
        String FTitle = entity.getFTitle();
        if (FTitle != null) {
            stmt.bindString(1, FTitle);
        }
 
        String FHuoquan = entity.getFHuoquan();
        if (FHuoquan != null) {
            stmt.bindString(2, FHuoquan);
        }
 
        String FBarCode = entity.getFBarCode();
        if (FBarCode != null) {
            stmt.bindString(3, FBarCode);
        }
 
        String FBatch = entity.getFBatch();
        if (FBatch != null) {
            stmt.bindString(4, FBatch);
        }
 
        String FName = entity.getFName();
        if (FName != null) {
            stmt.bindString(5, FName);
        }
 
        String FModel = entity.getFModel();
        if (FModel != null) {
            stmt.bindString(6, FModel);
        }
 
        String FNum = entity.getFNum();
        if (FNum != null) {
            stmt.bindString(7, FNum);
        }
 
        String FNum2 = entity.getFNum2();
        if (FNum2 != null) {
            stmt.bindString(8, FNum2);
        }
 
        String FUnit = entity.getFUnit();
        if (FUnit != null) {
            stmt.bindString(9, FUnit);
        }
 
        String FBaseUnit = entity.getFBaseUnit();
        if (FBaseUnit != null) {
            stmt.bindString(10, FBaseUnit);
        }
 
        String FBaseUnitID = entity.getFBaseUnitID();
        if (FBaseUnitID != null) {
            stmt.bindString(11, FBaseUnitID);
        }
 
        String FStoreUnit = entity.getFStoreUnit();
        if (FStoreUnit != null) {
            stmt.bindString(12, FStoreUnit);
        }
 
        String FUnitAux = entity.getFUnitAux();
        if (FUnitAux != null) {
            stmt.bindString(13, FUnitAux);
        }
 
        String FNot = entity.getFNot();
        if (FNot != null) {
            stmt.bindString(14, FNot);
        }
 
        String FWaveHouse = entity.getFWaveHouse();
        if (FWaveHouse != null) {
            stmt.bindString(15, FWaveHouse);
        }
 
        String FSaveIn = entity.getFSaveIn();
        if (FSaveIn != null) {
            stmt.bindString(16, FSaveIn);
        }
 
        String FCheck = entity.getFCheck();
        if (FCheck != null) {
            stmt.bindString(17, FCheck);
        }
 
        String FDate = entity.getFDate();
        if (FDate != null) {
            stmt.bindString(18, FDate);
        }
 
        String FMaterialid = entity.getFMaterialid();
        if (FMaterialid != null) {
            stmt.bindString(19, FMaterialid);
        }
 
        String FAuxSign = entity.getFAuxSign();
        if (FAuxSign != null) {
            stmt.bindString(20, FAuxSign);
        }
 
        String FActualModel = entity.getFActualModel();
        if (FActualModel != null) {
            stmt.bindString(21, FActualModel);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public PrintHistory readEntity(Cursor cursor, int offset) {
        PrintHistory entity = new PrintHistory( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // FTitle
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // FHuoquan
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // FBarCode
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // FBatch
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // FName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // FModel
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // FNum
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // FNum2
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // FUnit
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // FBaseUnit
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // FBaseUnitID
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // FStoreUnit
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // FUnitAux
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // FNot
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // FWaveHouse
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // FSaveIn
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // FCheck
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // FDate
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // FMaterialid
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // FAuxSign
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20) // FActualModel
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PrintHistory entity, int offset) {
        entity.setFTitle(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setFHuoquan(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFBarCode(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFBatch(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setFModel(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setFNum(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setFNum2(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setFUnit(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setFBaseUnit(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setFBaseUnitID(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setFStoreUnit(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setFUnitAux(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setFNot(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setFWaveHouse(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setFSaveIn(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setFCheck(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setFDate(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setFMaterialid(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setFAuxSign(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setFActualModel(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(PrintHistory entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(PrintHistory entity) {
        return null;
    }

    @Override
    public boolean hasKey(PrintHistory entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
