package com.fangzuo.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.fangzuo.assist.cloud.Dao.T_Detail;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "T__DETAIL".
*/
public class T_DetailDao extends AbstractDao<T_Detail, String> {

    public static final String TABLENAME = "T__DETAIL";

    /**
     * Properties of entity T_Detail.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property FIndex = new Property(0, String.class, "FIndex", true, "FINDEX");
        public final static Property FBarcode = new Property(1, String.class, "FBarcode", false, "FBARCODE");
        public final static Property IMIE = new Property(2, String.class, "IMIE", false, "IMIE");
        public final static Property FBillerID = new Property(3, String.class, "FBillerID", false, "FBILLER_ID");
        public final static Property FOrderId = new Property(4, long.class, "FOrderId", false, "FORDER_ID");
        public final static Property Activity = new Property(5, int.class, "activity", false, "ACTIVITY");
        public final static Property FEntryID = new Property(6, String.class, "FEntryID", false, "FENTRY_ID");
        public final static Property FID = new Property(7, String.class, "FID", false, "FID");
        public final static Property FProductName = new Property(8, String.class, "FProductName", false, "FPRODUCT_NAME");
        public final static Property Model = new Property(9, String.class, "model", false, "MODEL");
        public final static Property FStorageId = new Property(10, String.class, "FStorageId", false, "FSTORAGE_ID");
        public final static Property FStoragePDId = new Property(11, String.class, "FStoragePDId", false, "FSTORAGE_PDID");
        public final static Property FStorage = new Property(12, String.class, "FStorage", false, "FSTORAGE");
        public final static Property FWaveHouse = new Property(13, String.class, "FWaveHouse", false, "FWAVE_HOUSE");
        public final static Property FWaveHouseId = new Property(14, String.class, "FWaveHouseId", false, "FWAVE_HOUSE_ID");
        public final static Property FWaveHousePDId = new Property(15, String.class, "FWaveHousePDId", false, "FWAVE_HOUSE_PDID");
        public final static Property FUnit = new Property(16, String.class, "FUnit", false, "FUNIT");
        public final static Property FSupplier = new Property(17, String.class, "FSupplier", false, "FSUPPLIER");
        public final static Property FQuantity = new Property(18, String.class, "FQuantity", false, "FQUANTITY");
        public final static Property FBackDate = new Property(19, String.class, "FBackDate", false, "FBACK_DATE");
        public final static Property FBackType = new Property(20, String.class, "FBackType", false, "FBACK_TYPE");
        public final static Property FSOEntryId = new Property(21, String.class, "FSOEntryId", false, "FSOENTRY_ID");
        public final static Property FB2CORDERDETAILID = new Property(22, String.class, "FB2CORDERDETAILID", false, "FB2_CORDERDETAILID");
        public final static Property FStorageOutId = new Property(23, String.class, "FStorageOutId", false, "FSTORAGE_OUT_ID");
        public final static Property FStorageOut = new Property(24, String.class, "FStorageOut", false, "FSTORAGE_OUT");
        public final static Property FStorageInId = new Property(25, String.class, "FStorageInId", false, "FSTORAGE_IN_ID");
        public final static Property FStorageIn = new Property(26, String.class, "FStorageIn", false, "FSTORAGE_IN");
        public final static Property FWaveHouseOutId = new Property(27, String.class, "FWaveHouseOutId", false, "FWAVE_HOUSE_OUT_ID");
        public final static Property FWaveHouseOut = new Property(28, String.class, "FWaveHouseOut", false, "FWAVE_HOUSE_OUT");
        public final static Property FWaveHouseInId = new Property(29, String.class, "FWaveHouseInId", false, "FWAVE_HOUSE_IN_ID");
        public final static Property FWaveHouseIn = new Property(30, String.class, "FWaveHouseIn", false, "FWAVE_HOUSE_IN");
        public final static Property FBatch = new Property(31, String.class, "FBatch", false, "FBATCH");
        public final static Property FIsFree = new Property(32, boolean.class, "FIsFree", false, "FIS_FREE");
        public final static Property FWorkShopId1 = new Property(33, String.class, "FWorkShopId1", false, "FWORK_SHOP_ID1");
        public final static Property FRemainInStockQty = new Property(34, String.class, "FRemainInStockQty", false, "FREMAIN_IN_STOCK_QTY");
        public final static Property FRealQty = new Property(35, String.class, "FRealQty", false, "FREAL_QTY");
        public final static Property FRemainInStockUnitId = new Property(36, String.class, "FRemainInStockUnitId", false, "FREMAIN_IN_STOCK_UNIT_ID");
        public final static Property FPriceUnitID = new Property(37, String.class, "FPriceUnitID", false, "FPRICE_UNIT_ID");
        public final static Property FMaterialId = new Property(38, String.class, "FMaterialId", false, "FMATERIAL_ID");
        public final static Property FMaterialIdForPD = new Property(39, String.class, "FMaterialIdForPD", false, "FMATERIAL_ID_FOR_PD");
        public final static Property FUnitID = new Property(40, String.class, "FUnitID", false, "FUNIT_ID");
        public final static Property FUnitIDForPD = new Property(41, String.class, "FUnitIDForPD", false, "FUNIT_IDFOR_PD");
        public final static Property AuxSign = new Property(42, String.class, "AuxSign", false, "AUX_SIGN");
        public final static Property ActualModel = new Property(43, String.class, "ActualModel", false, "ACTUAL_MODEL");
        public final static Property FProductNo = new Property(44, String.class, "FProductNo", false, "FPRODUCT_NO");
        public final static Property FBillNo = new Property(45, String.class, "FBillNo", false, "FBILL_NO");
        public final static Property FAllowAddMaterial = new Property(46, String.class, "FAllowAddMaterial", false, "FALLOW_ADD_MATERIAL");
        public final static Property FZeroStockInCount = new Property(47, String.class, "FZeroStockInCount", false, "FZERO_STOCK_IN_COUNT");
        public final static Property FBillTypeID = new Property(48, String.class, "FBillTypeID", false, "FBILL_TYPE_ID");
        public final static Property FCheckQtyDefault = new Property(49, String.class, "FCheckQtyDefault", false, "FCHECK_QTY_DEFAULT");
        public final static Property FNotIncludeForbidMat = new Property(50, String.class, "FNotIncludeForbidMat", false, "FNOT_INCLUDE_FORBID_MAT");
        public final static Property FStockOrgId = new Property(51, String.class, "FStockOrgId", false, "FSTOCK_ORG_ID");
        public final static Property FDocumentStatus = new Property(52, String.class, "FDocumentStatus", false, "FDOCUMENT_STATUS");
        public final static Property FCloseStatus = new Property(53, String.class, "FCloseStatus", false, "FCLOSE_STATUS");
        public final static Property FNote = new Property(54, String.class, "FNote", false, "FNOTE");
        public final static Property FOWnerTypeID = new Property(55, String.class, "FOWnerTypeID", false, "FOWNER_TYPE_ID");
        public final static Property FOwnerId = new Property(56, String.class, "FOwnerId", false, "FOWNER_ID");
        public final static Property FKeeperTypeId = new Property(57, String.class, "FKeeperTypeId", false, "FKEEPER_TYPE_ID");
        public final static Property FKeeperId = new Property(58, String.class, "FKeeperId", false, "FKEEPER_ID");
    }


    public T_DetailDao(DaoConfig config) {
        super(config);
    }
    
    public T_DetailDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"T__DETAIL\" (" + //
                "\"FINDEX\" TEXT PRIMARY KEY NOT NULL ," + // 0: FIndex
                "\"FBARCODE\" TEXT," + // 1: FBarcode
                "\"IMIE\" TEXT," + // 2: IMIE
                "\"FBILLER_ID\" TEXT," + // 3: FBillerID
                "\"FORDER_ID\" INTEGER NOT NULL ," + // 4: FOrderId
                "\"ACTIVITY\" INTEGER NOT NULL ," + // 5: activity
                "\"FENTRY_ID\" TEXT," + // 6: FEntryID
                "\"FID\" TEXT," + // 7: FID
                "\"FPRODUCT_NAME\" TEXT," + // 8: FProductName
                "\"MODEL\" TEXT," + // 9: model
                "\"FSTORAGE_ID\" TEXT," + // 10: FStorageId
                "\"FSTORAGE_PDID\" TEXT," + // 11: FStoragePDId
                "\"FSTORAGE\" TEXT," + // 12: FStorage
                "\"FWAVE_HOUSE\" TEXT," + // 13: FWaveHouse
                "\"FWAVE_HOUSE_ID\" TEXT," + // 14: FWaveHouseId
                "\"FWAVE_HOUSE_PDID\" TEXT," + // 15: FWaveHousePDId
                "\"FUNIT\" TEXT," + // 16: FUnit
                "\"FSUPPLIER\" TEXT," + // 17: FSupplier
                "\"FQUANTITY\" TEXT," + // 18: FQuantity
                "\"FBACK_DATE\" TEXT," + // 19: FBackDate
                "\"FBACK_TYPE\" TEXT," + // 20: FBackType
                "\"FSOENTRY_ID\" TEXT," + // 21: FSOEntryId
                "\"FB2_CORDERDETAILID\" TEXT," + // 22: FB2CORDERDETAILID
                "\"FSTORAGE_OUT_ID\" TEXT," + // 23: FStorageOutId
                "\"FSTORAGE_OUT\" TEXT," + // 24: FStorageOut
                "\"FSTORAGE_IN_ID\" TEXT," + // 25: FStorageInId
                "\"FSTORAGE_IN\" TEXT," + // 26: FStorageIn
                "\"FWAVE_HOUSE_OUT_ID\" TEXT," + // 27: FWaveHouseOutId
                "\"FWAVE_HOUSE_OUT\" TEXT," + // 28: FWaveHouseOut
                "\"FWAVE_HOUSE_IN_ID\" TEXT," + // 29: FWaveHouseInId
                "\"FWAVE_HOUSE_IN\" TEXT," + // 30: FWaveHouseIn
                "\"FBATCH\" TEXT," + // 31: FBatch
                "\"FIS_FREE\" INTEGER NOT NULL ," + // 32: FIsFree
                "\"FWORK_SHOP_ID1\" TEXT," + // 33: FWorkShopId1
                "\"FREMAIN_IN_STOCK_QTY\" TEXT," + // 34: FRemainInStockQty
                "\"FREAL_QTY\" TEXT," + // 35: FRealQty
                "\"FREMAIN_IN_STOCK_UNIT_ID\" TEXT," + // 36: FRemainInStockUnitId
                "\"FPRICE_UNIT_ID\" TEXT," + // 37: FPriceUnitID
                "\"FMATERIAL_ID\" TEXT," + // 38: FMaterialId
                "\"FMATERIAL_ID_FOR_PD\" TEXT," + // 39: FMaterialIdForPD
                "\"FUNIT_ID\" TEXT," + // 40: FUnitID
                "\"FUNIT_IDFOR_PD\" TEXT," + // 41: FUnitIDForPD
                "\"AUX_SIGN\" TEXT," + // 42: AuxSign
                "\"ACTUAL_MODEL\" TEXT," + // 43: ActualModel
                "\"FPRODUCT_NO\" TEXT," + // 44: FProductNo
                "\"FBILL_NO\" TEXT," + // 45: FBillNo
                "\"FALLOW_ADD_MATERIAL\" TEXT," + // 46: FAllowAddMaterial
                "\"FZERO_STOCK_IN_COUNT\" TEXT," + // 47: FZeroStockInCount
                "\"FBILL_TYPE_ID\" TEXT," + // 48: FBillTypeID
                "\"FCHECK_QTY_DEFAULT\" TEXT," + // 49: FCheckQtyDefault
                "\"FNOT_INCLUDE_FORBID_MAT\" TEXT," + // 50: FNotIncludeForbidMat
                "\"FSTOCK_ORG_ID\" TEXT," + // 51: FStockOrgId
                "\"FDOCUMENT_STATUS\" TEXT," + // 52: FDocumentStatus
                "\"FCLOSE_STATUS\" TEXT," + // 53: FCloseStatus
                "\"FNOTE\" TEXT," + // 54: FNote
                "\"FOWNER_TYPE_ID\" TEXT," + // 55: FOWnerTypeID
                "\"FOWNER_ID\" TEXT," + // 56: FOwnerId
                "\"FKEEPER_TYPE_ID\" TEXT," + // 57: FKeeperTypeId
                "\"FKEEPER_ID\" TEXT);"); // 58: FKeeperId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"T__DETAIL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, T_Detail entity) {
        stmt.clearBindings();
 
        String FIndex = entity.getFIndex();
        if (FIndex != null) {
            stmt.bindString(1, FIndex);
        }
 
        String FBarcode = entity.getFBarcode();
        if (FBarcode != null) {
            stmt.bindString(2, FBarcode);
        }
 
        String IMIE = entity.getIMIE();
        if (IMIE != null) {
            stmt.bindString(3, IMIE);
        }
 
        String FBillerID = entity.getFBillerID();
        if (FBillerID != null) {
            stmt.bindString(4, FBillerID);
        }
        stmt.bindLong(5, entity.getFOrderId());
        stmt.bindLong(6, entity.getActivity());
 
        String FEntryID = entity.getFEntryID();
        if (FEntryID != null) {
            stmt.bindString(7, FEntryID);
        }
 
        String FID = entity.getFID();
        if (FID != null) {
            stmt.bindString(8, FID);
        }
 
        String FProductName = entity.getFProductName();
        if (FProductName != null) {
            stmt.bindString(9, FProductName);
        }
 
        String model = entity.getModel();
        if (model != null) {
            stmt.bindString(10, model);
        }
 
        String FStorageId = entity.getFStorageId();
        if (FStorageId != null) {
            stmt.bindString(11, FStorageId);
        }
 
        String FStoragePDId = entity.getFStoragePDId();
        if (FStoragePDId != null) {
            stmt.bindString(12, FStoragePDId);
        }
 
        String FStorage = entity.getFStorage();
        if (FStorage != null) {
            stmt.bindString(13, FStorage);
        }
 
        String FWaveHouse = entity.getFWaveHouse();
        if (FWaveHouse != null) {
            stmt.bindString(14, FWaveHouse);
        }
 
        String FWaveHouseId = entity.getFWaveHouseId();
        if (FWaveHouseId != null) {
            stmt.bindString(15, FWaveHouseId);
        }
 
        String FWaveHousePDId = entity.getFWaveHousePDId();
        if (FWaveHousePDId != null) {
            stmt.bindString(16, FWaveHousePDId);
        }
 
        String FUnit = entity.getFUnit();
        if (FUnit != null) {
            stmt.bindString(17, FUnit);
        }
 
        String FSupplier = entity.getFSupplier();
        if (FSupplier != null) {
            stmt.bindString(18, FSupplier);
        }
 
        String FQuantity = entity.getFQuantity();
        if (FQuantity != null) {
            stmt.bindString(19, FQuantity);
        }
 
        String FBackDate = entity.getFBackDate();
        if (FBackDate != null) {
            stmt.bindString(20, FBackDate);
        }
 
        String FBackType = entity.getFBackType();
        if (FBackType != null) {
            stmt.bindString(21, FBackType);
        }
 
        String FSOEntryId = entity.getFSOEntryId();
        if (FSOEntryId != null) {
            stmt.bindString(22, FSOEntryId);
        }
 
        String FB2CORDERDETAILID = entity.getFB2CORDERDETAILID();
        if (FB2CORDERDETAILID != null) {
            stmt.bindString(23, FB2CORDERDETAILID);
        }
 
        String FStorageOutId = entity.getFStorageOutId();
        if (FStorageOutId != null) {
            stmt.bindString(24, FStorageOutId);
        }
 
        String FStorageOut = entity.getFStorageOut();
        if (FStorageOut != null) {
            stmt.bindString(25, FStorageOut);
        }
 
        String FStorageInId = entity.getFStorageInId();
        if (FStorageInId != null) {
            stmt.bindString(26, FStorageInId);
        }
 
        String FStorageIn = entity.getFStorageIn();
        if (FStorageIn != null) {
            stmt.bindString(27, FStorageIn);
        }
 
        String FWaveHouseOutId = entity.getFWaveHouseOutId();
        if (FWaveHouseOutId != null) {
            stmt.bindString(28, FWaveHouseOutId);
        }
 
        String FWaveHouseOut = entity.getFWaveHouseOut();
        if (FWaveHouseOut != null) {
            stmt.bindString(29, FWaveHouseOut);
        }
 
        String FWaveHouseInId = entity.getFWaveHouseInId();
        if (FWaveHouseInId != null) {
            stmt.bindString(30, FWaveHouseInId);
        }
 
        String FWaveHouseIn = entity.getFWaveHouseIn();
        if (FWaveHouseIn != null) {
            stmt.bindString(31, FWaveHouseIn);
        }
 
        String FBatch = entity.getFBatch();
        if (FBatch != null) {
            stmt.bindString(32, FBatch);
        }
        stmt.bindLong(33, entity.getFIsFree() ? 1L: 0L);
 
        String FWorkShopId1 = entity.getFWorkShopId1();
        if (FWorkShopId1 != null) {
            stmt.bindString(34, FWorkShopId1);
        }
 
        String FRemainInStockQty = entity.getFRemainInStockQty();
        if (FRemainInStockQty != null) {
            stmt.bindString(35, FRemainInStockQty);
        }
 
        String FRealQty = entity.getFRealQty();
        if (FRealQty != null) {
            stmt.bindString(36, FRealQty);
        }
 
        String FRemainInStockUnitId = entity.getFRemainInStockUnitId();
        if (FRemainInStockUnitId != null) {
            stmt.bindString(37, FRemainInStockUnitId);
        }
 
        String FPriceUnitID = entity.getFPriceUnitID();
        if (FPriceUnitID != null) {
            stmt.bindString(38, FPriceUnitID);
        }
 
        String FMaterialId = entity.getFMaterialId();
        if (FMaterialId != null) {
            stmt.bindString(39, FMaterialId);
        }
 
        String FMaterialIdForPD = entity.getFMaterialIdForPD();
        if (FMaterialIdForPD != null) {
            stmt.bindString(40, FMaterialIdForPD);
        }
 
        String FUnitID = entity.getFUnitID();
        if (FUnitID != null) {
            stmt.bindString(41, FUnitID);
        }
 
        String FUnitIDForPD = entity.getFUnitIDForPD();
        if (FUnitIDForPD != null) {
            stmt.bindString(42, FUnitIDForPD);
        }
 
        String AuxSign = entity.getAuxSign();
        if (AuxSign != null) {
            stmt.bindString(43, AuxSign);
        }
 
        String ActualModel = entity.getActualModel();
        if (ActualModel != null) {
            stmt.bindString(44, ActualModel);
        }
 
        String FProductNo = entity.getFProductNo();
        if (FProductNo != null) {
            stmt.bindString(45, FProductNo);
        }
 
        String FBillNo = entity.getFBillNo();
        if (FBillNo != null) {
            stmt.bindString(46, FBillNo);
        }
 
        String FAllowAddMaterial = entity.getFAllowAddMaterial();
        if (FAllowAddMaterial != null) {
            stmt.bindString(47, FAllowAddMaterial);
        }
 
        String FZeroStockInCount = entity.getFZeroStockInCount();
        if (FZeroStockInCount != null) {
            stmt.bindString(48, FZeroStockInCount);
        }
 
        String FBillTypeID = entity.getFBillTypeID();
        if (FBillTypeID != null) {
            stmt.bindString(49, FBillTypeID);
        }
 
        String FCheckQtyDefault = entity.getFCheckQtyDefault();
        if (FCheckQtyDefault != null) {
            stmt.bindString(50, FCheckQtyDefault);
        }
 
        String FNotIncludeForbidMat = entity.getFNotIncludeForbidMat();
        if (FNotIncludeForbidMat != null) {
            stmt.bindString(51, FNotIncludeForbidMat);
        }
 
        String FStockOrgId = entity.getFStockOrgId();
        if (FStockOrgId != null) {
            stmt.bindString(52, FStockOrgId);
        }
 
        String FDocumentStatus = entity.getFDocumentStatus();
        if (FDocumentStatus != null) {
            stmt.bindString(53, FDocumentStatus);
        }
 
        String FCloseStatus = entity.getFCloseStatus();
        if (FCloseStatus != null) {
            stmt.bindString(54, FCloseStatus);
        }
 
        String FNote = entity.getFNote();
        if (FNote != null) {
            stmt.bindString(55, FNote);
        }
 
        String FOWnerTypeID = entity.getFOWnerTypeID();
        if (FOWnerTypeID != null) {
            stmt.bindString(56, FOWnerTypeID);
        }
 
        String FOwnerId = entity.getFOwnerId();
        if (FOwnerId != null) {
            stmt.bindString(57, FOwnerId);
        }
 
        String FKeeperTypeId = entity.getFKeeperTypeId();
        if (FKeeperTypeId != null) {
            stmt.bindString(58, FKeeperTypeId);
        }
 
        String FKeeperId = entity.getFKeeperId();
        if (FKeeperId != null) {
            stmt.bindString(59, FKeeperId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, T_Detail entity) {
        stmt.clearBindings();
 
        String FIndex = entity.getFIndex();
        if (FIndex != null) {
            stmt.bindString(1, FIndex);
        }
 
        String FBarcode = entity.getFBarcode();
        if (FBarcode != null) {
            stmt.bindString(2, FBarcode);
        }
 
        String IMIE = entity.getIMIE();
        if (IMIE != null) {
            stmt.bindString(3, IMIE);
        }
 
        String FBillerID = entity.getFBillerID();
        if (FBillerID != null) {
            stmt.bindString(4, FBillerID);
        }
        stmt.bindLong(5, entity.getFOrderId());
        stmt.bindLong(6, entity.getActivity());
 
        String FEntryID = entity.getFEntryID();
        if (FEntryID != null) {
            stmt.bindString(7, FEntryID);
        }
 
        String FID = entity.getFID();
        if (FID != null) {
            stmt.bindString(8, FID);
        }
 
        String FProductName = entity.getFProductName();
        if (FProductName != null) {
            stmt.bindString(9, FProductName);
        }
 
        String model = entity.getModel();
        if (model != null) {
            stmt.bindString(10, model);
        }
 
        String FStorageId = entity.getFStorageId();
        if (FStorageId != null) {
            stmt.bindString(11, FStorageId);
        }
 
        String FStoragePDId = entity.getFStoragePDId();
        if (FStoragePDId != null) {
            stmt.bindString(12, FStoragePDId);
        }
 
        String FStorage = entity.getFStorage();
        if (FStorage != null) {
            stmt.bindString(13, FStorage);
        }
 
        String FWaveHouse = entity.getFWaveHouse();
        if (FWaveHouse != null) {
            stmt.bindString(14, FWaveHouse);
        }
 
        String FWaveHouseId = entity.getFWaveHouseId();
        if (FWaveHouseId != null) {
            stmt.bindString(15, FWaveHouseId);
        }
 
        String FWaveHousePDId = entity.getFWaveHousePDId();
        if (FWaveHousePDId != null) {
            stmt.bindString(16, FWaveHousePDId);
        }
 
        String FUnit = entity.getFUnit();
        if (FUnit != null) {
            stmt.bindString(17, FUnit);
        }
 
        String FSupplier = entity.getFSupplier();
        if (FSupplier != null) {
            stmt.bindString(18, FSupplier);
        }
 
        String FQuantity = entity.getFQuantity();
        if (FQuantity != null) {
            stmt.bindString(19, FQuantity);
        }
 
        String FBackDate = entity.getFBackDate();
        if (FBackDate != null) {
            stmt.bindString(20, FBackDate);
        }
 
        String FBackType = entity.getFBackType();
        if (FBackType != null) {
            stmt.bindString(21, FBackType);
        }
 
        String FSOEntryId = entity.getFSOEntryId();
        if (FSOEntryId != null) {
            stmt.bindString(22, FSOEntryId);
        }
 
        String FB2CORDERDETAILID = entity.getFB2CORDERDETAILID();
        if (FB2CORDERDETAILID != null) {
            stmt.bindString(23, FB2CORDERDETAILID);
        }
 
        String FStorageOutId = entity.getFStorageOutId();
        if (FStorageOutId != null) {
            stmt.bindString(24, FStorageOutId);
        }
 
        String FStorageOut = entity.getFStorageOut();
        if (FStorageOut != null) {
            stmt.bindString(25, FStorageOut);
        }
 
        String FStorageInId = entity.getFStorageInId();
        if (FStorageInId != null) {
            stmt.bindString(26, FStorageInId);
        }
 
        String FStorageIn = entity.getFStorageIn();
        if (FStorageIn != null) {
            stmt.bindString(27, FStorageIn);
        }
 
        String FWaveHouseOutId = entity.getFWaveHouseOutId();
        if (FWaveHouseOutId != null) {
            stmt.bindString(28, FWaveHouseOutId);
        }
 
        String FWaveHouseOut = entity.getFWaveHouseOut();
        if (FWaveHouseOut != null) {
            stmt.bindString(29, FWaveHouseOut);
        }
 
        String FWaveHouseInId = entity.getFWaveHouseInId();
        if (FWaveHouseInId != null) {
            stmt.bindString(30, FWaveHouseInId);
        }
 
        String FWaveHouseIn = entity.getFWaveHouseIn();
        if (FWaveHouseIn != null) {
            stmt.bindString(31, FWaveHouseIn);
        }
 
        String FBatch = entity.getFBatch();
        if (FBatch != null) {
            stmt.bindString(32, FBatch);
        }
        stmt.bindLong(33, entity.getFIsFree() ? 1L: 0L);
 
        String FWorkShopId1 = entity.getFWorkShopId1();
        if (FWorkShopId1 != null) {
            stmt.bindString(34, FWorkShopId1);
        }
 
        String FRemainInStockQty = entity.getFRemainInStockQty();
        if (FRemainInStockQty != null) {
            stmt.bindString(35, FRemainInStockQty);
        }
 
        String FRealQty = entity.getFRealQty();
        if (FRealQty != null) {
            stmt.bindString(36, FRealQty);
        }
 
        String FRemainInStockUnitId = entity.getFRemainInStockUnitId();
        if (FRemainInStockUnitId != null) {
            stmt.bindString(37, FRemainInStockUnitId);
        }
 
        String FPriceUnitID = entity.getFPriceUnitID();
        if (FPriceUnitID != null) {
            stmt.bindString(38, FPriceUnitID);
        }
 
        String FMaterialId = entity.getFMaterialId();
        if (FMaterialId != null) {
            stmt.bindString(39, FMaterialId);
        }
 
        String FMaterialIdForPD = entity.getFMaterialIdForPD();
        if (FMaterialIdForPD != null) {
            stmt.bindString(40, FMaterialIdForPD);
        }
 
        String FUnitID = entity.getFUnitID();
        if (FUnitID != null) {
            stmt.bindString(41, FUnitID);
        }
 
        String FUnitIDForPD = entity.getFUnitIDForPD();
        if (FUnitIDForPD != null) {
            stmt.bindString(42, FUnitIDForPD);
        }
 
        String AuxSign = entity.getAuxSign();
        if (AuxSign != null) {
            stmt.bindString(43, AuxSign);
        }
 
        String ActualModel = entity.getActualModel();
        if (ActualModel != null) {
            stmt.bindString(44, ActualModel);
        }
 
        String FProductNo = entity.getFProductNo();
        if (FProductNo != null) {
            stmt.bindString(45, FProductNo);
        }
 
        String FBillNo = entity.getFBillNo();
        if (FBillNo != null) {
            stmt.bindString(46, FBillNo);
        }
 
        String FAllowAddMaterial = entity.getFAllowAddMaterial();
        if (FAllowAddMaterial != null) {
            stmt.bindString(47, FAllowAddMaterial);
        }
 
        String FZeroStockInCount = entity.getFZeroStockInCount();
        if (FZeroStockInCount != null) {
            stmt.bindString(48, FZeroStockInCount);
        }
 
        String FBillTypeID = entity.getFBillTypeID();
        if (FBillTypeID != null) {
            stmt.bindString(49, FBillTypeID);
        }
 
        String FCheckQtyDefault = entity.getFCheckQtyDefault();
        if (FCheckQtyDefault != null) {
            stmt.bindString(50, FCheckQtyDefault);
        }
 
        String FNotIncludeForbidMat = entity.getFNotIncludeForbidMat();
        if (FNotIncludeForbidMat != null) {
            stmt.bindString(51, FNotIncludeForbidMat);
        }
 
        String FStockOrgId = entity.getFStockOrgId();
        if (FStockOrgId != null) {
            stmt.bindString(52, FStockOrgId);
        }
 
        String FDocumentStatus = entity.getFDocumentStatus();
        if (FDocumentStatus != null) {
            stmt.bindString(53, FDocumentStatus);
        }
 
        String FCloseStatus = entity.getFCloseStatus();
        if (FCloseStatus != null) {
            stmt.bindString(54, FCloseStatus);
        }
 
        String FNote = entity.getFNote();
        if (FNote != null) {
            stmt.bindString(55, FNote);
        }
 
        String FOWnerTypeID = entity.getFOWnerTypeID();
        if (FOWnerTypeID != null) {
            stmt.bindString(56, FOWnerTypeID);
        }
 
        String FOwnerId = entity.getFOwnerId();
        if (FOwnerId != null) {
            stmt.bindString(57, FOwnerId);
        }
 
        String FKeeperTypeId = entity.getFKeeperTypeId();
        if (FKeeperTypeId != null) {
            stmt.bindString(58, FKeeperTypeId);
        }
 
        String FKeeperId = entity.getFKeeperId();
        if (FKeeperId != null) {
            stmt.bindString(59, FKeeperId);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public T_Detail readEntity(Cursor cursor, int offset) {
        T_Detail entity = new T_Detail( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // FIndex
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // FBarcode
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // IMIE
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // FBillerID
            cursor.getLong(offset + 4), // FOrderId
            cursor.getInt(offset + 5), // activity
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // FEntryID
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // FID
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // FProductName
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // model
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // FStorageId
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // FStoragePDId
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // FStorage
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // FWaveHouse
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // FWaveHouseId
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // FWaveHousePDId
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // FUnit
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // FSupplier
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // FQuantity
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // FBackDate
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // FBackType
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // FSOEntryId
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // FB2CORDERDETAILID
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // FStorageOutId
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // FStorageOut
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // FStorageInId
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // FStorageIn
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // FWaveHouseOutId
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // FWaveHouseOut
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // FWaveHouseInId
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // FWaveHouseIn
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // FBatch
            cursor.getShort(offset + 32) != 0, // FIsFree
            cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33), // FWorkShopId1
            cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34), // FRemainInStockQty
            cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35), // FRealQty
            cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36), // FRemainInStockUnitId
            cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37), // FPriceUnitID
            cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38), // FMaterialId
            cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39), // FMaterialIdForPD
            cursor.isNull(offset + 40) ? null : cursor.getString(offset + 40), // FUnitID
            cursor.isNull(offset + 41) ? null : cursor.getString(offset + 41), // FUnitIDForPD
            cursor.isNull(offset + 42) ? null : cursor.getString(offset + 42), // AuxSign
            cursor.isNull(offset + 43) ? null : cursor.getString(offset + 43), // ActualModel
            cursor.isNull(offset + 44) ? null : cursor.getString(offset + 44), // FProductNo
            cursor.isNull(offset + 45) ? null : cursor.getString(offset + 45), // FBillNo
            cursor.isNull(offset + 46) ? null : cursor.getString(offset + 46), // FAllowAddMaterial
            cursor.isNull(offset + 47) ? null : cursor.getString(offset + 47), // FZeroStockInCount
            cursor.isNull(offset + 48) ? null : cursor.getString(offset + 48), // FBillTypeID
            cursor.isNull(offset + 49) ? null : cursor.getString(offset + 49), // FCheckQtyDefault
            cursor.isNull(offset + 50) ? null : cursor.getString(offset + 50), // FNotIncludeForbidMat
            cursor.isNull(offset + 51) ? null : cursor.getString(offset + 51), // FStockOrgId
            cursor.isNull(offset + 52) ? null : cursor.getString(offset + 52), // FDocumentStatus
            cursor.isNull(offset + 53) ? null : cursor.getString(offset + 53), // FCloseStatus
            cursor.isNull(offset + 54) ? null : cursor.getString(offset + 54), // FNote
            cursor.isNull(offset + 55) ? null : cursor.getString(offset + 55), // FOWnerTypeID
            cursor.isNull(offset + 56) ? null : cursor.getString(offset + 56), // FOwnerId
            cursor.isNull(offset + 57) ? null : cursor.getString(offset + 57), // FKeeperTypeId
            cursor.isNull(offset + 58) ? null : cursor.getString(offset + 58) // FKeeperId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, T_Detail entity, int offset) {
        entity.setFIndex(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setFBarcode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setIMIE(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFBillerID(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFOrderId(cursor.getLong(offset + 4));
        entity.setActivity(cursor.getInt(offset + 5));
        entity.setFEntryID(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setFID(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setFProductName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setModel(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setFStorageId(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setFStoragePDId(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setFStorage(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setFWaveHouse(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setFWaveHouseId(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setFWaveHousePDId(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setFUnit(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setFSupplier(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setFQuantity(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setFBackDate(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setFBackType(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setFSOEntryId(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setFB2CORDERDETAILID(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setFStorageOutId(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setFStorageOut(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setFStorageInId(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setFStorageIn(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setFWaveHouseOutId(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setFWaveHouseOut(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setFWaveHouseInId(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setFWaveHouseIn(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setFBatch(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setFIsFree(cursor.getShort(offset + 32) != 0);
        entity.setFWorkShopId1(cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33));
        entity.setFRemainInStockQty(cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34));
        entity.setFRealQty(cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35));
        entity.setFRemainInStockUnitId(cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36));
        entity.setFPriceUnitID(cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37));
        entity.setFMaterialId(cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38));
        entity.setFMaterialIdForPD(cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39));
        entity.setFUnitID(cursor.isNull(offset + 40) ? null : cursor.getString(offset + 40));
        entity.setFUnitIDForPD(cursor.isNull(offset + 41) ? null : cursor.getString(offset + 41));
        entity.setAuxSign(cursor.isNull(offset + 42) ? null : cursor.getString(offset + 42));
        entity.setActualModel(cursor.isNull(offset + 43) ? null : cursor.getString(offset + 43));
        entity.setFProductNo(cursor.isNull(offset + 44) ? null : cursor.getString(offset + 44));
        entity.setFBillNo(cursor.isNull(offset + 45) ? null : cursor.getString(offset + 45));
        entity.setFAllowAddMaterial(cursor.isNull(offset + 46) ? null : cursor.getString(offset + 46));
        entity.setFZeroStockInCount(cursor.isNull(offset + 47) ? null : cursor.getString(offset + 47));
        entity.setFBillTypeID(cursor.isNull(offset + 48) ? null : cursor.getString(offset + 48));
        entity.setFCheckQtyDefault(cursor.isNull(offset + 49) ? null : cursor.getString(offset + 49));
        entity.setFNotIncludeForbidMat(cursor.isNull(offset + 50) ? null : cursor.getString(offset + 50));
        entity.setFStockOrgId(cursor.isNull(offset + 51) ? null : cursor.getString(offset + 51));
        entity.setFDocumentStatus(cursor.isNull(offset + 52) ? null : cursor.getString(offset + 52));
        entity.setFCloseStatus(cursor.isNull(offset + 53) ? null : cursor.getString(offset + 53));
        entity.setFNote(cursor.isNull(offset + 54) ? null : cursor.getString(offset + 54));
        entity.setFOWnerTypeID(cursor.isNull(offset + 55) ? null : cursor.getString(offset + 55));
        entity.setFOwnerId(cursor.isNull(offset + 56) ? null : cursor.getString(offset + 56));
        entity.setFKeeperTypeId(cursor.isNull(offset + 57) ? null : cursor.getString(offset + 57));
        entity.setFKeeperId(cursor.isNull(offset + 58) ? null : cursor.getString(offset + 58));
     }
    
    @Override
    protected final String updateKeyAfterInsert(T_Detail entity, long rowId) {
        return entity.getFIndex();
    }
    
    @Override
    public String getKey(T_Detail entity) {
        if(entity != null) {
            return entity.getFIndex();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(T_Detail entity) {
        return entity.getFIndex() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
