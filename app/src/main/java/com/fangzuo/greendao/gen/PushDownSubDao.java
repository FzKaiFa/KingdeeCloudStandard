package com.fangzuo.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.fangzuo.assist.cloud.Dao.PushDownSub;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PUSH_DOWN_SUB".
*/
public class PushDownSubDao extends AbstractDao<PushDownSub, Long> {

    public static final String TABLENAME = "PUSH_DOWN_SUB";

    /**
     * Properties of entity PushDownSub.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property FSEQ = new Property(1, String.class, "FSEQ", false, "FSEQ");
        public final static Property FID = new Property(2, String.class, "FID", false, "FID");
        public final static Property FMaterialID = new Property(3, String.class, "FMaterialID", false, "FMATERIAL_ID");
        public final static Property FEntryID = new Property(4, String.class, "FEntryID", false, "FENTRY_ID");
        public final static Property FUnitID = new Property(5, String.class, "FUnitID", false, "FUNIT_ID");
        public final static Property FNumber = new Property(6, String.class, "FNumber", false, "FNUMBER");
        public final static Property FName = new Property(7, String.class, "FName", false, "FNAME");
        public final static Property FModel = new Property(8, String.class, "FModel", false, "FMODEL");
        public final static Property FBillNo = new Property(9, String.class, "FBillNo", false, "FBILL_NO");
        public final static Property FQty = new Property(10, String.class, "FQty", false, "FQTY");
        public final static Property FQtying = new Property(11, String.class, "FQtying", false, "FQTYING");
        public final static Property FTaxPrice = new Property(12, String.class, "FTaxPrice", false, "FTAX_PRICE");
        public final static Property FStockID = new Property(13, String.class, "FStockID", false, "FSTOCK_ID");
        public final static Property FBatchNo = new Property(14, String.class, "FBatchNo", false, "FBATCH_NO");
        public final static Property FBaseCanreturnQty = new Property(15, String.class, "FBaseCanreturnQty", false, "FBASE_CANRETURN_QTY");
        public final static Property FHuoZhuNumber = new Property(16, String.class, "FHuoZhuNumber", false, "FHUO_ZHU_NUMBER");
    }


    public PushDownSubDao(DaoConfig config) {
        super(config);
    }
    
    public PushDownSubDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PUSH_DOWN_SUB\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"FSEQ\" TEXT," + // 1: FSEQ
                "\"FID\" TEXT," + // 2: FID
                "\"FMATERIAL_ID\" TEXT," + // 3: FMaterialID
                "\"FENTRY_ID\" TEXT," + // 4: FEntryID
                "\"FUNIT_ID\" TEXT," + // 5: FUnitID
                "\"FNUMBER\" TEXT," + // 6: FNumber
                "\"FNAME\" TEXT," + // 7: FName
                "\"FMODEL\" TEXT," + // 8: FModel
                "\"FBILL_NO\" TEXT," + // 9: FBillNo
                "\"FQTY\" TEXT," + // 10: FQty
                "\"FQTYING\" TEXT," + // 11: FQtying
                "\"FTAX_PRICE\" TEXT," + // 12: FTaxPrice
                "\"FSTOCK_ID\" TEXT," + // 13: FStockID
                "\"FBATCH_NO\" TEXT," + // 14: FBatchNo
                "\"FBASE_CANRETURN_QTY\" TEXT," + // 15: FBaseCanreturnQty
                "\"FHUO_ZHU_NUMBER\" TEXT);"); // 16: FHuoZhuNumber
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PUSH_DOWN_SUB\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PushDownSub entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String FSEQ = entity.getFSEQ();
        if (FSEQ != null) {
            stmt.bindString(2, FSEQ);
        }
 
        String FID = entity.getFID();
        if (FID != null) {
            stmt.bindString(3, FID);
        }
 
        String FMaterialID = entity.getFMaterialID();
        if (FMaterialID != null) {
            stmt.bindString(4, FMaterialID);
        }
 
        String FEntryID = entity.getFEntryID();
        if (FEntryID != null) {
            stmt.bindString(5, FEntryID);
        }
 
        String FUnitID = entity.getFUnitID();
        if (FUnitID != null) {
            stmt.bindString(6, FUnitID);
        }
 
        String FNumber = entity.getFNumber();
        if (FNumber != null) {
            stmt.bindString(7, FNumber);
        }
 
        String FName = entity.getFName();
        if (FName != null) {
            stmt.bindString(8, FName);
        }
 
        String FModel = entity.getFModel();
        if (FModel != null) {
            stmt.bindString(9, FModel);
        }
 
        String FBillNo = entity.getFBillNo();
        if (FBillNo != null) {
            stmt.bindString(10, FBillNo);
        }
 
        String FQty = entity.getFQty();
        if (FQty != null) {
            stmt.bindString(11, FQty);
        }
 
        String FQtying = entity.getFQtying();
        if (FQtying != null) {
            stmt.bindString(12, FQtying);
        }
 
        String FTaxPrice = entity.getFTaxPrice();
        if (FTaxPrice != null) {
            stmt.bindString(13, FTaxPrice);
        }
 
        String FStockID = entity.getFStockID();
        if (FStockID != null) {
            stmt.bindString(14, FStockID);
        }
 
        String FBatchNo = entity.getFBatchNo();
        if (FBatchNo != null) {
            stmt.bindString(15, FBatchNo);
        }
 
        String FBaseCanreturnQty = entity.getFBaseCanreturnQty();
        if (FBaseCanreturnQty != null) {
            stmt.bindString(16, FBaseCanreturnQty);
        }
 
        String FHuoZhuNumber = entity.getFHuoZhuNumber();
        if (FHuoZhuNumber != null) {
            stmt.bindString(17, FHuoZhuNumber);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PushDownSub entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String FSEQ = entity.getFSEQ();
        if (FSEQ != null) {
            stmt.bindString(2, FSEQ);
        }
 
        String FID = entity.getFID();
        if (FID != null) {
            stmt.bindString(3, FID);
        }
 
        String FMaterialID = entity.getFMaterialID();
        if (FMaterialID != null) {
            stmt.bindString(4, FMaterialID);
        }
 
        String FEntryID = entity.getFEntryID();
        if (FEntryID != null) {
            stmt.bindString(5, FEntryID);
        }
 
        String FUnitID = entity.getFUnitID();
        if (FUnitID != null) {
            stmt.bindString(6, FUnitID);
        }
 
        String FNumber = entity.getFNumber();
        if (FNumber != null) {
            stmt.bindString(7, FNumber);
        }
 
        String FName = entity.getFName();
        if (FName != null) {
            stmt.bindString(8, FName);
        }
 
        String FModel = entity.getFModel();
        if (FModel != null) {
            stmt.bindString(9, FModel);
        }
 
        String FBillNo = entity.getFBillNo();
        if (FBillNo != null) {
            stmt.bindString(10, FBillNo);
        }
 
        String FQty = entity.getFQty();
        if (FQty != null) {
            stmt.bindString(11, FQty);
        }
 
        String FQtying = entity.getFQtying();
        if (FQtying != null) {
            stmt.bindString(12, FQtying);
        }
 
        String FTaxPrice = entity.getFTaxPrice();
        if (FTaxPrice != null) {
            stmt.bindString(13, FTaxPrice);
        }
 
        String FStockID = entity.getFStockID();
        if (FStockID != null) {
            stmt.bindString(14, FStockID);
        }
 
        String FBatchNo = entity.getFBatchNo();
        if (FBatchNo != null) {
            stmt.bindString(15, FBatchNo);
        }
 
        String FBaseCanreturnQty = entity.getFBaseCanreturnQty();
        if (FBaseCanreturnQty != null) {
            stmt.bindString(16, FBaseCanreturnQty);
        }
 
        String FHuoZhuNumber = entity.getFHuoZhuNumber();
        if (FHuoZhuNumber != null) {
            stmt.bindString(17, FHuoZhuNumber);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PushDownSub readEntity(Cursor cursor, int offset) {
        PushDownSub entity = new PushDownSub( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // FSEQ
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // FID
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // FMaterialID
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // FEntryID
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // FUnitID
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // FNumber
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // FName
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // FModel
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // FBillNo
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // FQty
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // FQtying
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // FTaxPrice
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // FStockID
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // FBatchNo
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // FBaseCanreturnQty
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16) // FHuoZhuNumber
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PushDownSub entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFSEQ(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFID(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFMaterialID(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFEntryID(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setFUnitID(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setFNumber(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setFName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setFModel(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setFBillNo(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setFQty(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setFQtying(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setFTaxPrice(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setFStockID(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setFBatchNo(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setFBaseCanreturnQty(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setFHuoZhuNumber(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PushDownSub entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PushDownSub entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PushDownSub entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
