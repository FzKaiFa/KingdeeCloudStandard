package com.fangzuo.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.fangzuo.assist.cloud.Dao.PushDownMain;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PUSH_DOWN_MAIN".
*/
public class PushDownMainDao extends AbstractDao<PushDownMain, Long> {

    public static final String TABLENAME = "PUSH_DOWN_MAIN";

    /**
     * Properties of entity PushDownMain.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property FID = new Property(1, String.class, "FID", false, "FID");
        public final static Property FBillNo = new Property(2, String.class, "FBillNo", false, "FBILL_NO");
        public final static Property FDate = new Property(3, String.class, "FDate", false, "FDATE");
        public final static Property FSupplyID = new Property(4, String.class, "FSupplyID", false, "FSUPPLY_ID");
        public final static Property FSupply = new Property(5, String.class, "FSupply", false, "FSUPPLY");
        public final static Property FSaleOrgID = new Property(6, String.class, "FSaleOrgID", false, "FSALE_ORG_ID");
        public final static Property FStoreOrgID = new Property(7, String.class, "FStoreOrgID", false, "FSTORE_ORG_ID");
        public final static Property FSettleOrgId = new Property(8, String.class, "FSettleOrgId", false, "FSETTLE_ORG_ID");
        public final static Property FSaleManID = new Property(9, String.class, "FSaleManID", false, "FSALE_MAN_ID");
        public final static Property FSaleDeptID = new Property(10, String.class, "FSaleDeptID", false, "FSALE_DEPT_ID");
        public final static Property FNot = new Property(11, String.class, "FNot", false, "FNOT");
        public final static Property Tag = new Property(12, int.class, "tag", false, "TAG");
        public final static Property FBillTypeName = new Property(13, String.class, "FBillTypeName", false, "FBILL_TYPE_NAME");
    }


    public PushDownMainDao(DaoConfig config) {
        super(config);
    }
    
    public PushDownMainDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PUSH_DOWN_MAIN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"FID\" TEXT," + // 1: FID
                "\"FBILL_NO\" TEXT," + // 2: FBillNo
                "\"FDATE\" TEXT," + // 3: FDate
                "\"FSUPPLY_ID\" TEXT," + // 4: FSupplyID
                "\"FSUPPLY\" TEXT," + // 5: FSupply
                "\"FSALE_ORG_ID\" TEXT," + // 6: FSaleOrgID
                "\"FSTORE_ORG_ID\" TEXT," + // 7: FStoreOrgID
                "\"FSETTLE_ORG_ID\" TEXT," + // 8: FSettleOrgId
                "\"FSALE_MAN_ID\" TEXT," + // 9: FSaleManID
                "\"FSALE_DEPT_ID\" TEXT," + // 10: FSaleDeptID
                "\"FNOT\" TEXT," + // 11: FNot
                "\"TAG\" INTEGER NOT NULL ," + // 12: tag
                "\"FBILL_TYPE_NAME\" TEXT);"); // 13: FBillTypeName
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PUSH_DOWN_MAIN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PushDownMain entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String FID = entity.getFID();
        if (FID != null) {
            stmt.bindString(2, FID);
        }
 
        String FBillNo = entity.getFBillNo();
        if (FBillNo != null) {
            stmt.bindString(3, FBillNo);
        }
 
        String FDate = entity.getFDate();
        if (FDate != null) {
            stmt.bindString(4, FDate);
        }
 
        String FSupplyID = entity.getFSupplyID();
        if (FSupplyID != null) {
            stmt.bindString(5, FSupplyID);
        }
 
        String FSupply = entity.getFSupply();
        if (FSupply != null) {
            stmt.bindString(6, FSupply);
        }
 
        String FSaleOrgID = entity.getFSaleOrgID();
        if (FSaleOrgID != null) {
            stmt.bindString(7, FSaleOrgID);
        }
 
        String FStoreOrgID = entity.getFStoreOrgID();
        if (FStoreOrgID != null) {
            stmt.bindString(8, FStoreOrgID);
        }
 
        String FSettleOrgId = entity.getFSettleOrgId();
        if (FSettleOrgId != null) {
            stmt.bindString(9, FSettleOrgId);
        }
 
        String FSaleManID = entity.getFSaleManID();
        if (FSaleManID != null) {
            stmt.bindString(10, FSaleManID);
        }
 
        String FSaleDeptID = entity.getFSaleDeptID();
        if (FSaleDeptID != null) {
            stmt.bindString(11, FSaleDeptID);
        }
 
        String FNot = entity.getFNot();
        if (FNot != null) {
            stmt.bindString(12, FNot);
        }
        stmt.bindLong(13, entity.getTag());
 
        String FBillTypeName = entity.getFBillTypeName();
        if (FBillTypeName != null) {
            stmt.bindString(14, FBillTypeName);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PushDownMain entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String FID = entity.getFID();
        if (FID != null) {
            stmt.bindString(2, FID);
        }
 
        String FBillNo = entity.getFBillNo();
        if (FBillNo != null) {
            stmt.bindString(3, FBillNo);
        }
 
        String FDate = entity.getFDate();
        if (FDate != null) {
            stmt.bindString(4, FDate);
        }
 
        String FSupplyID = entity.getFSupplyID();
        if (FSupplyID != null) {
            stmt.bindString(5, FSupplyID);
        }
 
        String FSupply = entity.getFSupply();
        if (FSupply != null) {
            stmt.bindString(6, FSupply);
        }
 
        String FSaleOrgID = entity.getFSaleOrgID();
        if (FSaleOrgID != null) {
            stmt.bindString(7, FSaleOrgID);
        }
 
        String FStoreOrgID = entity.getFStoreOrgID();
        if (FStoreOrgID != null) {
            stmt.bindString(8, FStoreOrgID);
        }
 
        String FSettleOrgId = entity.getFSettleOrgId();
        if (FSettleOrgId != null) {
            stmt.bindString(9, FSettleOrgId);
        }
 
        String FSaleManID = entity.getFSaleManID();
        if (FSaleManID != null) {
            stmt.bindString(10, FSaleManID);
        }
 
        String FSaleDeptID = entity.getFSaleDeptID();
        if (FSaleDeptID != null) {
            stmt.bindString(11, FSaleDeptID);
        }
 
        String FNot = entity.getFNot();
        if (FNot != null) {
            stmt.bindString(12, FNot);
        }
        stmt.bindLong(13, entity.getTag());
 
        String FBillTypeName = entity.getFBillTypeName();
        if (FBillTypeName != null) {
            stmt.bindString(14, FBillTypeName);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PushDownMain readEntity(Cursor cursor, int offset) {
        PushDownMain entity = new PushDownMain( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // FID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // FBillNo
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // FDate
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // FSupplyID
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // FSupply
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // FSaleOrgID
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // FStoreOrgID
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // FSettleOrgId
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // FSaleManID
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // FSaleDeptID
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // FNot
            cursor.getInt(offset + 12), // tag
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13) // FBillTypeName
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PushDownMain entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFBillNo(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFDate(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFSupplyID(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setFSupply(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setFSaleOrgID(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setFStoreOrgID(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setFSettleOrgId(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setFSaleManID(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setFSaleDeptID(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setFNot(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setTag(cursor.getInt(offset + 12));
        entity.setFBillTypeName(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PushDownMain entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PushDownMain entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PushDownMain entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
